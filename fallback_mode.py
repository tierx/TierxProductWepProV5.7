"""
Fallback Mode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Cloudflare Rate Limit
‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠ Error 1015 ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ
"""

import json
import time
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class FallbackManager:
    def __init__(self):
        self.is_fallback_mode = False
        self.fallback_start_time = None
        self.fallback_duration = 300  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        self.rate_limit_count = 0
        self.max_rate_limits = 5
        
    def activate_fallback(self, reason="Unknown"):
        """‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô fallback mode"""
        self.is_fallback_mode = True
        self.fallback_start_time = datetime.now()
        self.rate_limit_count += 1
        
        logger.warning(f"üîí Fallback mode activated: {reason}")
        logger.info(f"‚è∞ Fallback mode will last {self.fallback_duration} seconds")
        
        return True
    
    def deactivate_fallback(self):
        """‡∏õ‡∏¥‡∏î fallback mode"""
        self.is_fallback_mode = False
        self.fallback_start_time = None
        
        logger.info("‚úÖ Fallback mode deactivated")
        
    def should_exit_fallback(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å fallback mode ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        if not self.is_fallback_mode:
            return False
            
        if not self.fallback_start_time:
            return True
            
        elapsed = (datetime.now() - self.fallback_start_time).total_seconds()
        return elapsed >= self.fallback_duration
    
    def check_and_update_fallback(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï fallback mode"""
        if self.is_fallback_mode and self.should_exit_fallback():
            self.deactivate_fallback()
            
        return self.is_fallback_mode
    
    def is_cloudflare_error(self, error_message):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Cloudflare error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        error_str = str(error_message).lower()
        cloudflare_indicators = [
            "cloudflare",
            "1015",
            "access denied",
            "rate limited",
            "too many requests",
            "you are being rate limited"
        ]
        
        return any(indicator in error_str for indicator in cloudflare_indicators)
    
    def handle_discord_error(self, error):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Discord error ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤ fallback mode"""
        error_str = str(error)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cloudflare Rate Limit
        if self.is_cloudflare_error(error_str):
            self.activate_fallback(f"Cloudflare Error: {error.status if hasattr(error, 'status') else 'Unknown'}")
            return True
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Discord Rate Limit ‡∏õ‡∏Å‡∏ï‡∏¥
        if hasattr(error, 'status') and error.status == 429:
            if not self.is_cloudflare_error(error_str):
                # Discord Rate Limit ‡∏õ‡∏Å‡∏ï‡∏¥ - ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ fallback mode
                logger.info("üêå Discord rate limit - waiting normally")
                return False
            else:
                self.activate_fallback("Cloudflare + Discord Rate Limit")
                return True
                
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Permission errors
        if hasattr(error, 'status') and error.status == 403:
            logger.warning(f"üö´ Permission denied: {error}")
            # ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ fallback mode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö permission error
            return False
            
        return False
    
    def get_status(self):
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        if not self.is_fallback_mode:
            return {
                "mode": "normal",
                "rate_limit_count": self.rate_limit_count
            }
            
        elapsed = 0
        if self.fallback_start_time:
            elapsed = (datetime.now() - self.fallback_start_time).total_seconds()
            
        remaining = max(0, self.fallback_duration - elapsed)
        
        return {
            "mode": "fallback",
            "elapsed": elapsed,
            "remaining": remaining,
            "rate_limit_count": self.rate_limit_count
        }

# Global instance
fallback_manager = FallbackManager()